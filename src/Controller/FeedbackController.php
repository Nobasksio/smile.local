<?php

namespace App\Controller;

use App\Entity\Feedback;
use App\Form\FeedbackType;
use App\Repository\FeedbackRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;


class FeedbackController extends MainController
{
    /**
     * @Route("/admin/feedback_list", name="feedback_list", methods={"GET"})
     */
    public function feedback_list(FeedbackRepository $feedbackRepository): Response
    {
        return $this->render('admin/feedback_list.html.twig', [
            'feedbacks' => $feedbackRepository->findBy([],['date'=> 'Desc'])
        ]);
    }
    /**
     * @Route("/contacts", name="contacts", methods={"GET","POST"})
     */
    public function index(Request $request): Response
    {

        $feedback = new Feedback();
        $form = $this->createForm(FeedbackType::class, $feedback);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('file')->getData();
            if ($file!=null) {
                $file_name = $this->generateUniqueFileName() . '.' . $file->guessExtension();

                $file->move(
                    $this->getParameter('upload_file'),
                    $file_name
                );
                $feedback->setFile($file_name);
            }

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($feedback);
            $entityManager->flush();

            return $this->redirectToRoute('contacts_ok');
        }

        $place = $this->getParameter('myseting_place');
        $file_content = file_get_contents($place.'/contact.txt');
        $arr_str = explode("\n", $file_content);
        $contact = [];
        foreach ($arr_str as $item){
            $item_arr = explode(":", $item);
            $contact[$item_arr[0]] = $item_arr[1];
        }

        $work_time = $this->getWorktime();

        return $this->render('contact.html.twig', [
            'form' => $form->createView(),
            'press_phone'=>$contact['phone'],
            'press_name'=>$contact['name'],
            'press_mail'=>$contact['mail'],
            'work_time'=>$work_time
        ]);
    }
    /**
     * @Route("/contacts_ok", name="contacts_ok", methods={"GET"})
     */
    public function contacts_ok(): Response
    {


        return $this->render('contact_ok.html.twig', [

        ]);
    }

    /**
     * @Route("/new", name="feedback_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $feedback = new Feedback();
        $form = $this->createForm(FeedbackType::class, $feedback);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($feedback);
            $entityManager->flush();

            return $this->redirectToRoute('feedback_index');
        }

        return $this->render('feedback/new.html.twig', [
            'feedback' => $feedback,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("admin/feedback/{id}", name="feedback_show", methods={"GET"})
     */
    public function show(Feedback $feedback): Response
    {
        return $this->render('feedback/show.html.twig', [
            'feedback' => $feedback,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="feedback_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, Feedback $feedback): Response
    {
        $form = $this->createForm(FeedbackType::class, $feedback);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('feedback_index', [
                'id' => $feedback->getId(),
            ]);
        }

        return $this->render('feedback/edit.html.twig', [
            'feedback' => $feedback,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/admin/feedback/delete/{id}", name="feedback_delete", methods={"GET"})
     */
    public function delete(Request $request, Feedback $feedback): Response
    {

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($feedback);
            $entityManager->flush();


        return $this->redirectToRoute('feedback_list');
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
